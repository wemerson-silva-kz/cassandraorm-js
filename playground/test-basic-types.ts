#!/usr/bin/env bun
import { 
  createClient, 
  CassandraTypes,
  type CassandraDataType 
} from '../src/index.js';

async function testBasicTypes() {
  console.log('üóÉÔ∏è Demonstra√ß√£o dos Tipos do Cassandra\n');

  // Mostrar todos os tipos dispon√≠veis
  console.log('üìã TIPOS DE DADOS DO CASSANDRA DISPON√çVEIS:\n');

  console.log('üî¢ TIPOS NUM√âRICOS:');
  console.log('   ‚Ä¢ tinyint    - 8-bit signed integer (-128 to 127)');
  console.log('   ‚Ä¢ smallint   - 16-bit signed integer (-32,768 to 32,767)');
  console.log('   ‚Ä¢ int        - 32-bit signed integer');
  console.log('   ‚Ä¢ bigint     - 64-bit signed long');
  console.log('   ‚Ä¢ varint     - arbitrary precision integer');
  console.log('   ‚Ä¢ float      - 32-bit IEEE-754 floating point');
  console.log('   ‚Ä¢ double     - 64-bit IEEE-754 floating point');
  console.log('   ‚Ä¢ decimal    - variable-precision decimal');

  console.log('\nüìù TIPOS DE TEXTO:');
  console.log('   ‚Ä¢ ascii      - ASCII character string');
  console.log('   ‚Ä¢ text       - UTF8 encoded string');
  console.log('   ‚Ä¢ varchar    - UTF8 encoded string (alias for text)');

  console.log('\nüìÖ TIPOS DE DATA/HORA:');
  console.log('   ‚Ä¢ timestamp  - date and time with millisecond precision');
  console.log('   ‚Ä¢ date       - date without time');
  console.log('   ‚Ä¢ time       - time without date');
  console.log('   ‚Ä¢ duration   - duration with nanosecond precision');

  console.log('\nüÜî TIPOS UUID:');
  console.log('   ‚Ä¢ uuid       - type 1 or type 4 UUID');
  console.log('   ‚Ä¢ timeuuid   - type 1 UUID (time-based)');

  console.log('\nüì¶ TIPOS DE COLE√á√ÉO:');
  console.log('   ‚Ä¢ set<type>     - unordered unique collection');
  console.log('   ‚Ä¢ list<type>    - ordered collection with duplicates');
  console.log('   ‚Ä¢ map<k,v>      - key-value pairs');
  console.log('   ‚Ä¢ tuple<types>  - fixed-length sequence');

  console.log('\nüîß TIPOS ESPECIAIS:');
  console.log('   ‚Ä¢ boolean    - true or false');
  console.log('   ‚Ä¢ blob       - arbitrary bytes');
  console.log('   ‚Ä¢ inet       - IPv4 or IPv6 address');
  console.log('   ‚Ä¢ counter    - distributed counter');
  console.log('   ‚Ä¢ json       - JSON data (Cassandra 4.0+)');
  console.log('   ‚Ä¢ frozen<T>  - frozen user-defined type');

  console.log('\nüîß HELPERS DISPON√çVEIS:');
  console.log(`
// Tipos b√°sicos
CassandraTypes.UUID        // 'uuid'
CassandraTypes.TEXT        // 'text'
CassandraTypes.INT         // 'int'
CassandraTypes.DECIMAL     // 'decimal'
CassandraTypes.BOOLEAN     // 'boolean'
CassandraTypes.TIMESTAMP   // 'timestamp'

// Helpers para cole√ß√µes
CassandraTypes.set('text')           // 'set<text>'
CassandraTypes.list('int')           // 'list<int>'
CassandraTypes.map('text', 'text')   // 'map<text,text>'
CassandraTypes.tuple('double,double') // 'tuple<double,double>'
CassandraTypes.frozen('address_type') // 'frozen<address_type>'
`);

  console.log('\nüí° EXEMPLOS DE USO:');
  console.log(`
// Exemplo 1: Schema b√°sico
const userSchema = {
  fields: {
    id: CassandraTypes.UUID,
    email: { type: CassandraTypes.TEXT, unique: true },
    name: CassandraTypes.TEXT,
    age: CassandraTypes.INT,
    active: { type: CassandraTypes.BOOLEAN, default: true },
    created_at: CassandraTypes.TIMESTAMP
  },
  key: ['id']
};

// Exemplo 2: Schema com cole√ß√µes
const productSchema = {
  fields: {
    id: CassandraTypes.UUID,
    name: CassandraTypes.TEXT,
    price: CassandraTypes.DECIMAL,
    tags: CassandraTypes.set(CassandraTypes.TEXT),
    images: CassandraTypes.list(CassandraTypes.TEXT),
    attributes: CassandraTypes.map(CassandraTypes.TEXT, CassandraTypes.TEXT)
  },
  key: ['id']
};

// Exemplo 3: Sintaxe direta
const directSchema = {
  fields: {
    id: 'uuid',
    name: 'text',
    tags: 'set<text>',
    scores: 'list<int>',
    metadata: 'map<text,text>'
  },
  key: ['id']
};
`);

  console.log('\nüéØ VALIDA√á√ïES SUPORTADAS:');
  console.log(`
const validatedSchema = {
  fields: {
    id: 'uuid',
    email: { 
      type: 'text', 
      unique: true, 
      validate: { 
        required: true, 
        isEmail: true 
      } 
    },
    age: { 
      type: 'int', 
      validate: { 
        min: 0, 
        max: 120 
      } 
    },
    name: { 
      type: 'text', 
      validate: { 
        required: true, 
        minLength: 2, 
        maxLength: 50 
      } 
    }
  },
  key: ['id']
};
`);

  console.log('\nüöÄ TESTE PR√ÅTICO:');
  
  const client = createClient({
    clientOptions: {
      contactPoints: ['127.0.0.1'],
      localDataCenter: 'datacenter1',
      keyspace: `test_demo_${Date.now()}`
    },
    ormOptions: {
      createKeyspace: true,
      migration: 'safe'
    }
  });

  try {
    await client.connect();
    console.log('‚úÖ Conectado ao Cassandra');

    const User = await client.loadSchema('users', {
      fields: {
        id: CassandraTypes.UUID,
        email: { type: CassandraTypes.TEXT, unique: true },
        name: CassandraTypes.TEXT,
        active: { type: CassandraTypes.BOOLEAN, default: true },
        created_at: CassandraTypes.TIMESTAMP
      },
      key: ['id']
    });

    const user = await User.create({
      id: client.uuid(),
      email: 'demo@example.com',
      name: 'Demo User',
      active: true,
      created_at: new Date()
    });

    console.log('‚úÖ Usu√°rio criado com tipos do Cassandra:', user.name);
    console.log('\nüéâ Tipos do Cassandra implementados e funcionando!');

  } catch (error) {
    console.error('\n‚ùå Erro:', error.message);
  } finally {
    await client.disconnect();
    console.log('\nüëã Desconectado do Cassandra');
  }
}

// Executar demonstra√ß√£o
testBasicTypes();
