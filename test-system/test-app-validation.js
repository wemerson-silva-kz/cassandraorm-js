// Valida√ß√£o de Unicidade na Aplica√ß√£o - CassandraORM JS v1.0.1
import { createClient, uuid } from 'cassandraorm-js';

console.log('üîí VALIDA√á√ÉO DE UNICIDADE NA APLICA√á√ÉO - v1.0.1');

let client;

class UniqueUserManager {
  constructor(client) {
    this.client = client;
  }

  async checkEmailExists(email) {
    try {
      const result = await this.client.execute(
        'SELECT email FROM users_validated WHERE email = ?',
        [email]
      );
      return result.rows.length > 0;
    } catch (error) {
      // Se tabela n√£o existe, email n√£o existe
      return false;
    }
  }

  async checkNameExists(name) {
    try {
      const result = await this.client.execute(
        'SELECT name FROM users_validated WHERE name = ? ALLOW FILTERING',
        [name]
      );
      return result.rows.length > 0;
    } catch (error) {
      return false;
    }
  }

  async createUser(userData) {
    const { name, email } = userData;

    // Validar email √∫nico
    if (await this.checkEmailExists(email)) {
      throw new Error(`Email '${email}' j√° existe`);
    }

    // Validar nome √∫nico
    if (await this.checkNameExists(name)) {
      throw new Error(`Nome '${name}' j√° existe`);
    }

    // Inserir usu√°rio
    const userId = uuid();
    await this.client.execute(
      'INSERT INTO users_validated (id, email, name, created_at) VALUES (?, ?, ?, ?)',
      [userId, email, name, new Date()]
    );

    return { id: userId, ...userData };
  }

  async updateUser(id, userData) {
    const { name, email } = userData;

    // Verificar se email j√° existe (exceto para este usu√°rio)
    if (email) {
      const emailCheck = await this.client.execute(
        'SELECT id FROM users_validated WHERE email = ?',
        [email]
      );
      
      if (emailCheck.rows.length > 0 && emailCheck.rows[0].id.toString() !== id) {
        throw new Error(`Email '${email}' j√° existe`);
      }
    }

    // Verificar se nome j√° existe (exceto para este usu√°rio)
    if (name) {
      const nameCheck = await this.client.execute(
        'SELECT id FROM users_validated WHERE name = ? ALLOW FILTERING',
        [name]
      );
      
      if (nameCheck.rows.length > 0 && nameCheck.rows[0].id.toString() !== id) {
        throw new Error(`Nome '${name}' j√° existe`);
      }
    }

    // Atualizar usu√°rio
    const updates = [];
    const params = [];
    
    if (email) {
      updates.push('email = ?');
      params.push(email);
    }
    
    if (name) {
      updates.push('name = ?');
      params.push(name);
    }
    
    if (updates.length > 0) {
      params.push(id);
      await this.client.execute(
        `UPDATE users_validated SET ${updates.join(', ')} WHERE id = ?`,
        params
      );
    }

    return { id, ...userData };
  }
}

async function setupClient() {
  try {
    console.log('\nüîß CONFIGURANDO CLIENTE...');
    
    client = createClient({
      clientOptions: {
        contactPoints: ['127.0.0.1'],
        localDataCenter: 'datacenter1',
        keyspace: 'test_system'
      }
    });
    
    await client.connect();
    console.log('‚úÖ Cliente conectado');
    
    // Criar tabela para valida√ß√£o
    await client.execute(`
      CREATE TABLE IF NOT EXISTS users_validated (
        id uuid PRIMARY KEY,
        email text,
        name text,
        created_at timestamp
      )
    `);
    console.log('‚úÖ Tabela users_validated criada');
    
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:', error.message);
    throw error;
  }
}

async function testUniqueValidation() {
  try {
    console.log('\nüîí TESTANDO VALIDA√á√ÉO DE UNICIDADE...');
    
    const userManager = new UniqueUserManager(client);
    
    // Limpar tabela
    await client.execute('TRUNCATE users_validated');
    console.log('‚úÖ Tabela limpa');
    
    // Teste 1: Criar primeiro usu√°rio
    console.log('\nüë§ TESTE 1 - CRIAR PRIMEIRO USU√ÅRIO:');
    try {
      const user1 = await userManager.createUser({
        name: 'Jo√£o Silva',
        email: 'joao@example.com'
      });
      console.log(`‚úÖ Usu√°rio criado: ${user1.name} - ${user1.email}`);
    } catch (error) {
      console.log(`‚ùå Erro: ${error.message}`);
    }
    
    // Teste 2: Tentar criar usu√°rio com email duplicado
    console.log('\nüìß TESTE 2 - EMAIL DUPLICADO:');
    try {
      const user2 = await userManager.createUser({
        name: 'Jo√£o Duplicado',
        email: 'joao@example.com'
      });
      console.log(`‚ùå Email duplicado aceito: ${user2.email}`);
    } catch (error) {
      console.log(`‚úÖ Email duplicado rejeitado: ${error.message}`);
    }
    
    // Teste 3: Tentar criar usu√°rio com nome duplicado
    console.log('\nüë§ TESTE 3 - NOME DUPLICADO:');
    try {
      const user3 = await userManager.createUser({
        name: 'Jo√£o Silva',
        email: 'joao2@example.com'
      });
      console.log(`‚ùå Nome duplicado aceito: ${user3.name}`);
    } catch (error) {
      console.log(`‚úÖ Nome duplicado rejeitado: ${error.message}`);
    }
    
    // Teste 4: Criar usu√°rio com dados √∫nicos
    console.log('\n‚úÖ TESTE 4 - DADOS √öNICOS:');
    try {
      const user4 = await userManager.createUser({
        name: 'Maria Santos',
        email: 'maria@example.com'
      });
      console.log(`‚úÖ Usu√°rio √∫nico criado: ${user4.name} - ${user4.email}`);
    } catch (error) {
      console.log(`‚ùå Erro: ${error.message}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

async function testUpdateValidation() {
  try {
    console.log('\nüîÑ TESTANDO VALIDA√á√ÉO DE ATUALIZA√á√ÉO...');
    
    const userManager = new UniqueUserManager(client);
    
    // Buscar usu√°rios existentes
    const users = await client.execute('SELECT id, name, email FROM users_validated');
    if (users.rows.length < 2) {
      console.log('‚ö†Ô∏è N√£o h√° usu√°rios suficientes para teste de atualiza√ß√£o');
      return;
    }
    
    const user1 = users.rows[0];
    const user2 = users.rows[1];
    
    console.log(`üìã Usu√°rio 1: ${user1.name} - ${user1.email}`);
    console.log(`üìã Usu√°rio 2: ${user2.name} - ${user2.email}`);
    
    // Teste 1: Tentar atualizar com email de outro usu√°rio
    console.log('\nüìß TESTE - ATUALIZAR COM EMAIL DUPLICADO:');
    try {
      await userManager.updateUser(user1.id.toString(), {
        email: user2.email
      });
      console.log('‚ùå Email duplicado aceito na atualiza√ß√£o');
    } catch (error) {
      console.log(`‚úÖ Email duplicado rejeitado na atualiza√ß√£o: ${error.message}`);
    }
    
    // Teste 2: Atualizar com dados √∫nicos
    console.log('\n‚úÖ TESTE - ATUALIZAR COM DADOS √öNICOS:');
    try {
      await userManager.updateUser(user1.id.toString(), {
        name: 'Jo√£o Silva Atualizado'
      });
      console.log('‚úÖ Atualiza√ß√£o com dados √∫nicos aceita');
    } catch (error) {
      console.log(`‚ùå Erro na atualiza√ß√£o: ${error.message}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste de atualiza√ß√£o:', error.message);
  }
}

async function validateFinalData() {
  try {
    console.log('\nüîç VALIDA√á√ÉO FINAL DOS DADOS...');
    
    const users = await client.execute('SELECT name, email FROM users_validated');
    console.log(`üìä Total de usu√°rios validados: ${users.rows.length}`);
    
    const emails = new Set();
    const names = new Set();
    let duplicateEmails = 0;
    let duplicateNames = 0;
    
    users.rows.forEach(user => {
      if (emails.has(user.email)) {
        duplicateEmails++;
        console.log(`‚ùå Email duplicado: ${user.email}`);
      } else {
        emails.add(user.email);
      }
      
      if (names.has(user.name)) {
        duplicateNames++;
        console.log(`‚ùå Nome duplicado: ${user.name}`);
      } else {
        names.add(user.name);
      }
      
      console.log(`  - ${user.name} (${user.email})`);
    });
    
    console.log(`‚úÖ Emails √∫nicos: ${emails.size}/${users.rows.length}`);
    console.log(`‚úÖ Nomes √∫nicos: ${names.size}/${users.rows.length}`);
    
    if (duplicateEmails === 0 && duplicateNames === 0) {
      console.log('üéâ VALIDA√á√ÉO PERFEITA - NENHUMA DUPLICATA!');
    } else {
      console.log(`‚ö†Ô∏è ${duplicateEmails} emails duplicados, ${duplicateNames} nomes duplicados`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o final:', error.message);
  }
}

async function cleanup() {
  try {
    console.log('\nüßπ LIMPEZA...');
    if (client) {
      await client.disconnect();
      console.log('‚úÖ Desconectado');
    }
  } catch (error) {
    console.error('‚ùå Erro na limpeza:', error.message);
  }
}

async function runValidationTests() {
  try {
    await setupClient();
    await testUniqueValidation();
    await testUpdateValidation();
    await validateFinalData();
    
    console.log('\nüéâ TESTE DE VALIDA√á√ÉO DE UNICIDADE CONCLU√çDO!');
    console.log('üìä RESUMO:');
    console.log('  ‚úÖ Valida√ß√£o de email √∫nico implementada');
    console.log('  ‚úÖ Valida√ß√£o de nome √∫nico implementada');
    console.log('  ‚úÖ Valida√ß√£o em cria√ß√£o testada');
    console.log('  ‚úÖ Valida√ß√£o em atualiza√ß√£o testada');
    console.log('  ‚úÖ Dados finais validados');
    console.log('\nüîí UNICIDADE GARANTIDA VIA APLICA√á√ÉO!');
    
  } catch (error) {
    console.error('\nüí• ERRO NO TESTE:', error.message);
  } finally {
    await cleanup();
  }
}

// Executar testes de valida√ß√£o
runValidationTests();
