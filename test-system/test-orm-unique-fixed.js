// Teste de Valida√ß√£o √önica no ORM Corrigido - CassandraORM JS v1.0.1
import { createClient, uuid } from 'cassandraorm-js';

console.log('üîí TESTE DE VALIDA√á√ÉO √öNICA NO ORM CORRIGIDO - v1.0.1');

// Schema com campos √∫nicos (sem tabelas auxiliares)
const userSchema = {
  fields: {
    id: 'uuid',
    email: 'text',
    name: 'text',
    username: 'text',
    created_at: 'timestamp'
  },
  key: ['id'],
  unique: ['email', 'name', 'username'], // Valida√ß√£o no ORM
  options: {
    table_name: 'users_orm_fixed'
  }
};

async function testORMUniqueValidationFixed() {
  const client = createClient({
    clientOptions: {
      contactPoints: ['127.0.0.1'],
      localDataCenter: 'datacenter1',
      keyspace: 'test_system'
    },
    ormOptions: {
      migration: 'safe'
    }
  });

  try {
    await client.connect();
    console.log('‚úÖ Conectado');

    // Carregar schema (apenas tabela principal)
    const User = await client.loadSchema('users_orm_fixed', userSchema);
    console.log('‚úÖ Schema carregado (apenas tabela principal)');

    // Limpar dados
    await client.execute('TRUNCATE users_orm_fixed');
    console.log('‚úÖ Tabela limpa');

    console.log('\nüîí TESTANDO VALIDA√á√ÉO NO ORM...');

    // Teste 1: Inserir primeiro usu√°rio
    console.log('\nüë§ TESTE 1 - PRIMEIRO USU√ÅRIO:');
    let user1Id;
    try {
      user1Id = uuid();
      const user1Data = {
        id: user1Id,
        email: 'joao@orm.com',
        name: 'Jo√£o Silva',
        username: 'joaosilva',
        created_at: new Date()
      };

      await client.insertWithUniqueValidation('users_orm_fixed', user1Data, userSchema);
      console.log('‚úÖ Primeiro usu√°rio inserido: Jo√£o Silva (joao@orm.com, @joaosilva)');
    } catch (error) {
      console.log(`‚ùå Erro: ${error.message}`);
    }

    // Teste 2: Tentar inserir email duplicado
    console.log('\nüìß TESTE 2 - EMAIL DUPLICADO:');
    try {
      const user2Data = {
        id: uuid(),
        email: 'joao@orm.com', // Email duplicado
        name: 'Jo√£o Diferente',
        username: 'joaodiferente',
        created_at: new Date()
      };

      await client.insertWithUniqueValidation('users_orm_fixed', user2Data, userSchema);
      console.log('‚ùå Email duplicado foi aceito');
    } catch (error) {
      console.log(`‚úÖ Email duplicado rejeitado: ${error.message}`);
    }

    // Teste 3: Inserir segundo usu√°rio √∫nico
    console.log('\n‚úÖ TESTE 3 - SEGUNDO USU√ÅRIO √öNICO:');
    let user2Id;
    try {
      user2Id = uuid();
      const user2Data = {
        id: user2Id,
        email: 'maria@orm.com',
        name: 'Maria Santos',
        username: 'mariasantos',
        created_at: new Date()
      };

      await client.insertWithUniqueValidation('users_orm_fixed', user2Data, userSchema);
      console.log('‚úÖ Segundo usu√°rio inserido: Maria Santos (maria@orm.com, @mariasantos)');
    } catch (error) {
      console.log(`‚ùå Erro: ${error.message}`);
    }

    // Teste 4: Atualiza√ß√£o com campo duplicado
    console.log('\nüîÑ TESTE 4 - ATUALIZA√á√ÉO COM DUPLICATA:');
    if (user1Id && user2Id) {
      try {
        await client.updateWithUniqueValidation('users_orm_fixed', user1Id, {
          email: 'maria@orm.com' // Email do segundo usu√°rio
        }, userSchema);
        console.log('‚ùå Atualiza√ß√£o com email duplicado foi aceita');
      } catch (error) {
        console.log(`‚úÖ Atualiza√ß√£o com duplicata rejeitada: ${error.message}`);
      }
    }

    // Teste 5: Atualiza√ß√£o v√°lida (mesmo valor)
    console.log('\n‚úÖ TESTE 5 - ATUALIZA√á√ÉO V√ÅLIDA (MESMO VALOR):');
    if (user1Id) {
      try {
        await client.updateWithUniqueValidation('users_orm_fixed', user1Id, {
          email: 'joao@orm.com' // Mesmo email do pr√≥prio usu√°rio
        }, userSchema);
        console.log('‚úÖ Atualiza√ß√£o com mesmo valor aceita');
      } catch (error) {
        console.log(`‚ùå Erro na atualiza√ß√£o: ${error.message}`);
      }
    }

    // Teste 6: Atualiza√ß√£o com valor novo
    console.log('\n‚úÖ TESTE 6 - ATUALIZA√á√ÉO COM VALOR NOVO:');
    if (user1Id) {
      try {
        await client.updateWithUniqueValidation('users_orm_fixed', user1Id, {
          name: 'Jo√£o Silva Atualizado'
        }, userSchema);
        console.log('‚úÖ Atualiza√ß√£o com valor novo aceita');
      } catch (error) {
        console.log(`‚ùå Erro na atualiza√ß√£o: ${error.message}`);
      }
    }

    // Valida√ß√£o final
    console.log('\nüîç VALIDA√á√ÉO FINAL:');
    const finalUsers = await client.execute('SELECT id, email, name, username FROM users_orm_fixed');
    console.log(`üìä Total de usu√°rios: ${finalUsers.rows.length}`);

    const emails = new Set();
    const names = new Set();
    const usernames = new Set();

    finalUsers.rows.forEach(user => {
      emails.add(user.email);
      names.add(user.name);
      usernames.add(user.username);
      console.log(`  - ${user.name} (${user.email}, @${user.username})`);
    });

    console.log(`‚úÖ Emails √∫nicos: ${emails.size}/${finalUsers.rows.length}`);
    console.log(`‚úÖ Nomes √∫nicos: ${names.size}/${finalUsers.rows.length}`);
    console.log(`‚úÖ Usernames √∫nicos: ${usernames.size}/${finalUsers.rows.length}`);

    const allUnique = emails.size === finalUsers.rows.length && 
                     names.size === finalUsers.rows.length && 
                     usernames.size === finalUsers.rows.length;

    if (allUnique) {
      console.log('üéâ VALIDA√á√ÉO NO ORM FUNCIONANDO PERFEITAMENTE!');
    } else {
      console.log('‚ö†Ô∏è Duplicatas detectadas');
    }

    // Verificar que h√° apenas 1 tabela
    console.log('\nüìã VERIFICA√á√ÉO DE TABELAS:');
    try {
      await client.execute('SELECT COUNT(*) FROM users_orm_fixed_unique_constraints');
      console.log('‚ö†Ô∏è Tabela auxiliar encontrada');
    } catch (error) {
      console.log('‚úÖ Nenhuma tabela auxiliar (como esperado)');
    }

    console.log('\nüìã RESUMO DA IMPLEMENTA√á√ÉO CORRIGIDA:');
    console.log('  ‚úÖ Valida√ß√£o feita no ORM via queries');
    console.log('  ‚úÖ Apenas 1 tabela no banco de dados');
    console.log('  ‚úÖ Sem usar != (n√£o suportado pelo Cassandra)');
    console.log('  ‚úÖ Filtro manual para UPDATE');
    console.log('  ‚úÖ Mensagens de erro em ingl√™s');
    console.log('  ‚úÖ ALLOW FILTERING para busca');

    await client.disconnect();
    console.log('\n‚úÖ TESTE CORRIGIDO CONCLU√çDO!');

  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  }
}

testORMUniqueValidationFixed();
