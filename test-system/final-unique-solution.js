// Solu√ß√£o Final para Unicidade - CassandraORM JS v1.0.1
import { createClient, uuid } from 'cassandraorm-js';

console.log('üîí SOLU√á√ÉO FINAL PARA UNICIDADE - v1.0.1');

// Schema com email como chave prim√°ria (√∫nica forma 100% confi√°vel no Cassandra)
const finalUserSchema = {
  fields: {
    email: 'text',      // Chave prim√°ria - garante unicidade absoluta
    id: 'uuid',
    name: 'text',
    created_at: 'timestamp'
  },
  key: ['email'],       // Email como partition key
  options: {
    table_name: 'users_final_unique'
  }
};

async function testFinalSolution() {
  const client = createClient({
    clientOptions: {
      contactPoints: ['127.0.0.1'],
      localDataCenter: 'datacenter1',
      keyspace: 'test_system'
    },
    ormOptions: {
      migration: 'safe'
    }
  });
  
  try {
    await client.connect();
    console.log('‚úÖ Conectado');
    
    // Criar schema final
    await client.loadSchema('users_final_unique', finalUserSchema);
    console.log('‚úÖ Schema final criado');
    
    // Limpar tabela
    await client.execute('TRUNCATE users_final_unique');
    console.log('‚úÖ Tabela limpa');
    
    console.log('\nüîí TESTANDO SOLU√á√ÉO FINAL...');
    
    // Teste 1: Inserir usu√°rio √∫nico
    console.log('\nüë§ TESTE 1 - USU√ÅRIO √öNICO:');
    const result1 = await client.execute(
      'INSERT INTO users_final_unique (email, id, name, created_at) VALUES (?, ?, ?, ?) IF NOT EXISTS',
      ['joao@final.com', uuid(), 'Jo√£o Silva', new Date()]
    );
    
    if (result1.rows[0]['[applied]']) {
      console.log('‚úÖ Primeiro usu√°rio inserido com sucesso');
    } else {
      console.log('‚ùå Falha ao inserir primeiro usu√°rio');
    }
    
    // Teste 2: Tentar inserir email duplicado
    console.log('\nüìß TESTE 2 - EMAIL DUPLICADO:');
    const result2 = await client.execute(
      'INSERT INTO users_final_unique (email, id, name, created_at) VALUES (?, ?, ?, ?) IF NOT EXISTS',
      ['joao@final.com', uuid(), 'Jo√£o Duplicado', new Date()]
    );
    
    if (result2.rows[0]['[applied]']) {
      console.log('‚ùå Email duplicado foi aceito (n√£o deveria)');
    } else {
      console.log('‚úÖ Email duplicado rejeitado corretamente');
    }
    
    // Teste 3: Inserir segundo usu√°rio √∫nico
    console.log('\nüë§ TESTE 3 - SEGUNDO USU√ÅRIO √öNICO:');
    const result3 = await client.execute(
      'INSERT INTO users_final_unique (email, id, name, created_at) VALUES (?, ?, ?, ?) IF NOT EXISTS',
      ['maria@final.com', uuid(), 'Maria Santos', new Date()]
    );
    
    if (result3.rows[0]['[applied]']) {
      console.log('‚úÖ Segundo usu√°rio inserido com sucesso');
    } else {
      console.log('‚ùå Falha ao inserir segundo usu√°rio');
    }
    
    // Teste 4: M√∫ltiplas tentativas de duplicata
    console.log('\nüö´ TESTE 4 - M√öLTIPLAS DUPLICATAS:');
    const duplicateEmails = ['joao@final.com', 'maria@final.com', 'joao@final.com'];
    let rejectedCount = 0;
    
    for (const email of duplicateEmails) {
      const result = await client.execute(
        'INSERT INTO users_final_unique (email, id, name, created_at) VALUES (?, ?, ?, ?) IF NOT EXISTS',
        [email, uuid(), `Duplicata ${email}`, new Date()]
      );
      
      if (!result.rows[0]['[applied]']) {
        rejectedCount++;
      }
    }
    
    console.log(`‚úÖ ${rejectedCount}/${duplicateEmails.length} duplicatas rejeitadas`);
    
    // Valida√ß√£o final
    console.log('\nüîç VALIDA√á√ÉO FINAL:');
    const finalUsers = await client.execute('SELECT email, name FROM users_final_unique');
    console.log(`üìä Total de usu√°rios √∫nicos: ${finalUsers.rows.length}`);
    
    const emails = new Set();
    finalUsers.rows.forEach(user => {
      emails.add(user.email);
      console.log(`  - ${user.name} (${user.email})`);
    });
    
    console.log(`‚úÖ Emails √∫nicos: ${emails.size}/${finalUsers.rows.length}`);
    
    if (emails.size === finalUsers.rows.length) {
      console.log('üéâ UNICIDADE 100% GARANTIDA!');
    } else {
      console.log('‚ùå Duplicatas encontradas');
    }
    
    console.log('\nüìã RESUMO DA SOLU√á√ÉO:');
    console.log('  ‚úÖ Email como chave prim√°ria');
    console.log('  ‚úÖ IF NOT EXISTS para verifica√ß√£o');
    console.log('  ‚úÖ Schema criado via loadSchema');
    console.log('  ‚úÖ Migration autom√°tica');
    console.log('  ‚úÖ Unicidade garantida pelo Cassandra');
    
    console.log('\nüí° RECOMENDA√á√ÉO PARA PRODU√á√ÉO:');
    console.log('  - Use email como chave prim√°ria para unicidade');
    console.log('  - Use IF NOT EXISTS em todas as inser√ß√µes');
    console.log('  - Para nomes √∫nicos, use valida√ß√£o na aplica√ß√£o');
    console.log('  - Considere usar UUIDs como chave se email pode mudar');
    
    await client.disconnect();
    console.log('\n‚úÖ SOLU√á√ÉO FINAL TESTADA COM SUCESSO!');
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  }
}

testFinalSolution();
