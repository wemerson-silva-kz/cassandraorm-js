{
  "CassandraORM Client": {
    "prefix": "cassandra-client",
    "body": [
      "import { createEnhancedClient } from 'cassandraorm-js';",
      "",
      "const client = createEnhancedClient({",
      "  clientOptions: {",
      "    contactPoints: ['${1:127.0.0.1}'],",
      "    localDataCenter: '${2:datacenter1}',",
      "    keyspace: '${3:myapp}'",
      "  },",
      "  ormOptions: {",
      "    createKeyspace: ${4:true},",
      "    migration: '${5:safe}'",
      "  }",
      "});",
      "",
      "await client.connect();"
    ],
    "description": "Create CassandraORM client"
  },

  "Enhanced Client with AI": {
    "prefix": "cassandra-ai-client",
    "body": [
      "import { createEnhancedClient } from 'cassandraorm-js';",
      "",
      "const client = createEnhancedClient({",
      "  clientOptions: {",
      "    contactPoints: ['${1:127.0.0.1}'],",
      "    localDataCenter: '${2:datacenter1}',",
      "    keyspace: '${3:myapp}'",
      "  },",
      "  aiml: {",
      "    openai: {",
      "      apiKey: process.env.OPENAI_API_KEY!,",
      "      model: '${4:text-embedding-3-small}'",
      "    },",
      "    semanticCache: {",
      "      enabled: ${5:true},",
      "      threshold: ${6:0.85}",
      "    }",
      "  },",
      "  performance: {",
      "    queryCache: {",
      "      enabled: ${7:true},",
      "      maxSize: ${8:1000},",
      "      ttl: ${9:300000}",
      "    }",
      "  }",
      "});",
      "",
      "await client.connect();"
    ],
    "description": "Create Enhanced CassandraORM client with AI/ML"
  },

  "Schema Definition": {
    "prefix": "cassandra-schema",
    "body": [
      "const ${1:User}Schema = {",
      "  fields: {",
      "    ${2:id}: {",
      "      type: '${3:uuid}',",
      "      validate: { required: true }",
      "    },",
      "    ${4:name}: {",
      "      type: '${5:text}',",
      "      validate: { required: true, minLength: 2 }",
      "    },",
      "    ${6:email}: {",
      "      type: '${7:text}',",
      "      validate: { required: true, isEmail: true }",
      "    },",
      "    ${8:created_at}: {",
      "      type: '${9:timestamp}',",
      "      default: () => new Date()",
      "    }",
      "  },",
      "  key: ['${2:id}'],",
      "  clustering_order: { ${8:created_at}: 'desc' }",
      "};"
    ],
    "description": "Define CassandraORM schema"
  },

  "Load Schema": {
    "prefix": "cassandra-load-schema",
    "body": [
      "const ${1:User} = await client.loadSchema('${2:users}', ${1:User}Schema);"
    ],
    "description": "Load schema into CassandraORM"
  },

  "CRUD Operations": {
    "prefix": "cassandra-crud",
    "body": [
      "// Create",
      "const new${1:User} = await ${1:User}.save({",
      "  ${2:name}: '${3:John Doe}',",
      "  ${4:email}: '${5:john@example.com}'",
      "});",
      "",
      "// Read",
      "const ${6:users} = await ${1:User}.find({ ${7:active}: true });",
      "const ${8:user} = await ${1:User}.findOne({ ${9:id}: ${10:userId} });",
      "",
      "// Update",
      "await ${1:User}.update({ ${9:id}: ${10:userId} }, { ${2:name}: '${11:Jane Doe}' });",
      "",
      "// Delete",
      "await ${1:User}.delete({ ${9:id}: ${10:userId} });"
    ],
    "description": "Basic CRUD operations"
  },

  "AI Embedding": {
    "prefix": "cassandra-ai-embedding",
    "body": [
      "// Generate embedding",
      "const embedding = await client.generateEmbedding('${1:search text}');",
      "",
      "// Vector similarity search",
      "const similar = await client.vectorSimilaritySearch(embedding, ${2:0.8});",
      "",
      "// AI query optimization",
      "const optimized = await client.optimizeQueryWithAI('${3:SELECT * FROM users}');"
    ],
    "description": "AI/ML operations"
  },

  "Distributed Lock": {
    "prefix": "cassandra-distributed-lock",
    "body": [
      "await client.withDistributedLock('${1:resource-name}', async () => {",
      "  // Critical section - only one process can execute this",
      "  ${2:// Your critical code here}",
      "}, ${3:10000}); // 10 second timeout"
    ],
    "description": "Distributed locking pattern"
  },

  "Migration": {
    "prefix": "cassandra-migration",
    "body": [
      "import { Migration } from 'cassandraorm-js';",
      "",
      "export const ${1:migrationName}Migration: Migration = {",
      "  up: async (client) => {",
      "    await client.execute(`",
      "      CREATE TABLE IF NOT EXISTS ${2:table_name} (",
      "        ${3:id} UUID PRIMARY KEY,",
      "        ${4:name} TEXT,",
      "        ${5:created_at} TIMESTAMP",
      "      )",
      "    `);",
      "  },",
      "  ",
      "  down: async (client) => {",
      "    await client.execute('DROP TABLE IF EXISTS ${2:table_name}');",
      "  }",
      "};"
    ],
    "description": "Database migration"
  },

  "Query Builder": {
    "prefix": "cassandra-query",
    "body": [
      "const result = await client.execute(",
      "  'SELECT ${1:*} FROM ${2:table_name} WHERE ${3:field} = ? ${4:AND other_field = ?}',",
      "  [${5:value1}${6:, value2}]",
      ");"
    ],
    "description": "Execute CQL query"
  }
}
